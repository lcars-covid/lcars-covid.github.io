//Table of Contentt/////////////////////////////////////////////////////////////////////////////////
//01. Check if item exists
//02. Remove Duplicates from Lists/Arrays
//03. Combine Lists into one, duplicates included
//04. Purge List
//05. Debug List
//06. px to rem
//07. String Replacement
//08. Create a box
//09. Positioning
//10. Positioning helpers
//11. Center an element
//12. Slightly lighten a color
//13. Slightly darken a color
//14. Media Breakpoint
//15. Text Truncate
//16. Text Sizes
//17. LTR/RTL Vuetify global mixin

//Content///////////////////////////////////////////////////////////////////////////////////////

//01. Check if item in List/Array exists
@function contains($list, $var) {
  @return (false == index($list, $var));
}

//02. Remove Duplicates from Lists/Arrays
@function remove-duplicates($list, $recursive: false) {
  $result: ();
  @each $item in $list {
    @if not index($result, $item) {
      @if length($item) > 1 and $recursive {
        $result: append($result, remove-duplicates($item, $recursive));
      } @else {
        $result: append($result, $item);
      }
    }
  }
  @return $result;
}

//03. Combine Lists into one, duplicates included
@function combine-list($collectedList) {
  $currentList: [];
  @each $collectedItem in $collectedList {
    $currentList: join($currentList, $collectedItem, comma);
  }
  @return $currentList;
}

//04. Purge List
@function purge($list) {
  $result: ();
  @each $item in $list {
    @if $item != null and $item != false and $item != "" {
      $result: append($result, $item);
    }
  }
  @return $result;
}

//05. Debug List
@function debug($list) {
  $result: #{"[ "};
  @each $item in $list {
    @if length($item) >1 {
      $result: $result#{debug($item)};
    } @else {
      $result: $result#{$item};
    }
    @if index($list, $item) != length($list) {
      $result: $result#{", "};
    }
  }
  $result: $result#{" ]"};
  @return $result;
}

//06. px to rem
@function rem($pixelFontSize) {
  @return #{($pixelFontSize/$base-font-size) * 1rem};
}

//07. String Replacement
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
  //str-replace($string, 'findthis', 'replacewiththis');
}

//08. Create a box
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

//09. Positioning
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

//10. Positioning helpers
@mixin absolute($args: "") {
  @include position(absolute, $args);
}

@mixin fixed($args: "") {
  @include position(fixed, $args);
}

@mixin relative($args: "") {
  @include position(relative, $args);
}
//@include absolute(top 100% left 0);

//11. Center an element
@mixin vertical-center {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

//12. Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color} */
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

//13. Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color} */
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

//14. Media Breakpoint
@import "responsive";

//15. Text Truncate
@mixin text-truncate($lines:2,$-line-height:1,$maskColor){
  max-height:#{$-line-height*$lines}em;
  position: relative;
  padding-right:rem(16);
  &:before {
    content:"...";
    position:absolute;
    bottom:0;
    right:0;
  }
  &:after {
    content: "";
    position:absolute;
    display:block;
    width:rem(16);
    height:rem(5);
    margin-top:rem(-6);
    background:$maskColor;
    right:0;
  }
}

//16. Text Sizes

@mixin fontSizes($class, $size, $alternateClassName) {
  @if $alternateClassName != "" {
    .text-#{$class},
    .text-#{$alternateClassName} {
      @include passFontSize($size);
    }
  } @else {
    .text-#{$class} {
      @include passFontSize($size);
    }
  }
}

@mixin passFontSize($size) {
  font-size: rem($size);
  line-height: 1.5em;
}

//17. LTR/RTL Vuetify global mixin
@mixin rtl() {
  .v-application--is-rtl & {
    @content;
  }
}

@mixin ltr() {
  .v-application--is-ltr & {
    @content;
  }
}

//18. Deep Get

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
      $map: map-get($map, $key);
  }
  @return $map;
}

//TO USE:  map-deep-get($o-grid-default-config, "layouts", "M");

//19. Deep Set

@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;
  
  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }
  
  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }
  
  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }
  
  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  
  // Return result
  @return $result;
}

//TO USE:  map-deep-set($o-grid-default-config, "layouts" "M", 650px);